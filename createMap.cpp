#include <iostream>
#include <stdlib.h>
#include <queue>

#define TO_INDEX(x, y, maxX) (maxX * y + x)
#define IS_VALID(x, y, maxX, maxY) (x >= 0 && x < maxX && y >= 0 && y < maxY)
using namespace std;
typedef struct
{
    int x;
    int y;
    int value;
    /* data */
} PointInfo;

typedef struct
{
    int x;
    int y;
    int id;
    int change;
} Action;

void checkAndPush(int x, int y, int temp, int maxX, int maxY, int *rightMap, int *roleMap, queue<PointInfo> &line)
{
    int index = TO_INDEX(x, y, maxX);
    if (
        IS_VALID(x, y, maxX, maxY))
    {
        if (rightMap[index] == 0)
        {
            rightMap[index] = maxX * maxY + 1;
        }
        if (
            roleMap[index] != 1 &&
            rightMap[index] > temp)
        {
            PointInfo next;
            next.x = x;
            next.y = y;
            next.value = temp;
            line.push(next);
            rightMap[index] = temp;
        }
    }
}

void createMap(int maxX, int maxY, int *rightMap, int *roleMap)
{
    PointInfo center;
    center.x = maxX / 2;
    center.y = maxY / 2;
    center.value = 1;
    rightMap[TO_INDEX(center.x, center.y, maxX)] = 1;
    queue<PointInfo> line;
    line.push(center);
    while (!line.empty())
    {
        PointInfo current = line.front();
        line.pop();
        int x = current.x;
        int y = current.y;
        int temp = current.value + 1;
        checkAndPush(x + 1, y, temp, maxX, maxY, rightMap, roleMap, line);
        checkAndPush(x - 1, y, temp, maxX, maxY, rightMap, roleMap, line);
        checkAndPush(x, y + 1, temp, maxX, maxY, rightMap, roleMap, line);
        checkAndPush(x, y - 1, temp, maxX, maxY, rightMap, roleMap, line);
    }
}

void printMap(int *map, int maxX, int maxY)
{
    for (int i = 0; i < maxX * maxY; i++)
    {
        if (i % maxX == 0)
        {
            std::cout << std::endl;
        }
        printf("%4d", map[i]);
    }
    std::cout << std::endl;
}

void updateAction(int from, int x, int y, int maxX, int maxY, int *rightMap, Action &action)
{
    if (IS_VALID(x, y, maxX, maxY))
    {
        int to = TO_INDEX(x, y, maxX);
        if (rightMap[from] - rightMap[to] > action.change)
        {
            action.change = rightMap[from] - rightMap[to];
            action.x = x;
            action.y = y;
            action.id = from;
        }
    }
}

void getMoveResult(int maxX, int maxY, int *rightMap, int *roleMap)
{
    Action action;
    action.change = 0;
    for (int i = 0; i < maxX * maxY; i++)
    {
        int x = i % maxX;
        int y = i / maxX;
        if (roleMap[i] == 4)
        {
            updateAction(i, x + 1, y, maxX, maxY, rightMap, action);
            updateAction(i, x - 1, y, maxX, maxY, rightMap, action);
            updateAction(i, x, y + 1, maxX, maxY, rightMap, action);
            updateAction(i, x, y - 1, maxX, maxY, rightMap, action);
        }
    }
    cout << "move: " << action.id % maxX << "," << action.id / maxX << " to: " << action.x << "," << action.y << endl;
    roleMap[action.id] = 0;
    roleMap[TO_INDEX(action.x, action.y, maxX)] = 4;
}

int roleMap[] = {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    4,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};
int rightMap[] = {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};

int main()
{
    printMap(roleMap, 19, 19);
    createMap(19, 19, rightMap, roleMap);
    printMap(rightMap, 19, 19);
    getMoveResult(19, 19, rightMap, roleMap);
    printMap(roleMap, 19, 19);
    getMoveResult(19, 19, rightMap, roleMap);
    printMap(roleMap, 19, 19);
    getMoveResult(19, 19, rightMap, roleMap);
    printMap(roleMap, 19, 19);
    getMoveResult(19, 19, rightMap, roleMap);
    printMap(roleMap, 19, 19);
    getMoveResult(19, 19, rightMap, roleMap);
    printMap(roleMap, 19, 19);
    getMoveResult(19, 19, rightMap, roleMap);
    printMap(roleMap, 19, 19);
    getMoveResult(19, 19, rightMap, roleMap);
    printMap(roleMap, 19, 19);
    getMoveResult(19, 19, rightMap, roleMap);
    printMap(roleMap, 19, 19);
    getMoveResult(19, 19, rightMap, roleMap);
    printMap(roleMap, 19, 19);
    getMoveResult(19, 19, rightMap, roleMap);
    printMap(roleMap, 19, 19);
    getMoveResult(19, 19, rightMap, roleMap);
    printMap(roleMap, 19, 19);
    return 0;
}